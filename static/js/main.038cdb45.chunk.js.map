{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","currentFrame","intervalId","nextStep","props","step","frameSize","infinite","count","images","length","nextFrame","setState","previousStep","inVisibleArea","index","this","itemWidth","animationDuration","className","style","width","transform","transitionDuration","map","imageUrl","classNames","src","alt","type","onClick","Component","App","handleChange","changeEvent","value","Number","target","name","checked","htmlFor","id","min","onChange","max","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.038cdb45.chunk.js","sourcesContent":["import { Component } from 'react';\nimport classNames from 'classnames';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n};\n\ntype State = {\n  currentFrame: number;\n};\n\nclass Carousel extends Component<Props, State> {\n  state: Readonly<State> = {\n    currentFrame: 0,\n  };\n\n  intervalId = 0;\n\n  nextStep = () => {\n    const {\n      step,\n      frameSize,\n      infinite,\n      images,\n    } = this.props;\n    const count = images.length;\n    const { currentFrame } = this.state;\n    let nextFrame = currentFrame + step;\n\n    if (currentFrame + frameSize === count && infinite) {\n      nextFrame = 0;\n    }\n\n    if (count - nextFrame < frameSize) {\n      nextFrame = count - frameSize;\n    }\n\n    this.setState({\n      currentFrame: nextFrame,\n    });\n  };\n\n  previousStep = () => {\n    const {\n      step,\n      infinite,\n      frameSize,\n      images,\n    } = this.props;\n    const count = images.length;\n    const { currentFrame } = this.state;\n    let nextFrame = currentFrame - step;\n\n    if (currentFrame === 0 && infinite) {\n      nextFrame = count - frameSize;\n    }\n\n    if (nextFrame < 0) {\n      nextFrame = 0;\n    }\n\n    this.setState({\n      currentFrame: nextFrame,\n    });\n  };\n\n  inVisibleArea = (index: number) => {\n    const { currentFrame } = this.state;\n    const { frameSize } = this.props;\n\n    return index >= currentFrame\n      && index < currentFrame + frameSize;\n  };\n\n  render() {\n    const {\n      images,\n      frameSize,\n      itemWidth,\n      animationDuration,\n    } = this.props;\n    const { currentFrame } = this.state;\n\n    return (\n      <div\n        className=\"Carousel\"\n        style={{\n          width: frameSize * itemWidth,\n        }}\n      >\n        <ul\n          className=\"Carousel__list\"\n          style={{\n            transform: `translateX(${-itemWidth * currentFrame}px)`,\n            transitionDuration: `${animationDuration}ms`,\n          }}\n        >\n          {images.map((imageUrl, index) => (\n            <li className=\"Carousel__item\">\n              <img\n                className={\n                  classNames('Carousel__img',\n                    {\n                      'Carousel__img--visible': this.inVisibleArea(index),\n                    })\n                }\n                src={imageUrl}\n                alt={`${index + 1}`}\n                width={itemWidth}\n              />\n            </li>\n          ))}\n        </ul>\n        <div className=\"Carousel__buttons\">\n          <button\n            type=\"button\"\n            onClick={this.previousStep}\n            className=\"Carousel__button\"\n          >\n            {'<<'}\n          </button>\n          <button\n            type=\"button\"\n            onClick={this.nextStep}\n            data-cy=\"next\"\n            className=\"Carousel__button\"\n          >\n            {'>>'}\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[],\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number\n  infinite: boolean,\n}\n\nclass App extends React.Component<{}, State> {\n  state: Readonly<State> = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  handleChange = (changeEvent: React.ChangeEvent<HTMLInputElement>) => {\n    const value = Number(changeEvent.target.value);\n    const name: keyof State = changeEvent.target.name as keyof State;\n\n    /*\n      * I know that this implementation is strange but if I do it simpler the linter starts to whine and gives this comlicated error that I don't know how to fix\n      * Argument of type '{ [x: string]: number; }' is not assignable to parameter of type 'State | ((prevState: Readonly<State>, props: Readonly<{}>) => State | Pick<State, keyof State> | null) | Pick<...> | null'.\n      * Type '{ [x: string]: number; }' is missing the following properties from type 'Pick<State, keyof State>': images, step, frameSize, itemWidth, and 2 more.\n    */\n\n    switch (name) {\n      case 'step':\n        this.setState({ [name]: value });\n        break;\n      case 'itemWidth':\n        this.setState({ [name]: value });\n        break;\n      case 'frameSize':\n        this.setState({ [name]: value });\n        break;\n      case 'animationDuration':\n        this.setState({ [name]: value });\n        break;\n      case 'infinite':\n        this.setState({ [name]: changeEvent.target.checked });\n        break;\n      default:\n    }\n  };\n\n  render() {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1 data-cy=\"title\">\n          {`Carousel with ${images.length} images`}\n        </h1>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n\n        <form className=\"App__form\">\n          <label htmlFor=\"itemId\" className=\"App__label\">\n            {'Item width: '}\n            <input\n              id=\"itemId\"\n              type=\"numner\"\n              min={10}\n              name=\"itemWidth\"\n              value={itemWidth}\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <label htmlFor=\"frameId\" className=\"App__label\">\n            {'Frame size: '}\n            <input\n              id=\"frameId\"\n              type=\"numner\"\n              min={1}\n              max={10}\n              name=\"frameSize\"\n              value={frameSize}\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <label htmlFor=\"stepId\" className=\"App__label\">\n            {'Step: '}\n            <input\n              id=\"stepId\"\n              type=\"numner\"\n              min={1}\n              max={9}\n              name=\"step\"\n              value={step}\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <label className=\"App__label\">\n            {'Animation duration: '}\n            <input\n              type=\"numner\"\n              min={0}\n              name=\"animationDuration\"\n              value={animationDuration}\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <label className=\"App__label\">\n            {'Infinite: '}\n            <input\n              type=\"checkbox\"\n              name=\"infinite\"\n              checked={infinite}\n              onChange={this.handleChange}\n            />\n          </label>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}